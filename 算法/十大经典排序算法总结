

十大经典排序算法总结（Java语言实现）


https://blog.csdn.net/wq_1995/article/details/81937926





1、冒泡排序（Bubble Sort）  从左到右相邻两个数比较大小，较大的数换到右边，下沉到右边，较小的数冒起来



    public void bubbleSort(int[] ints){
        if(ints.length<2){
            return;
        }
        int temp;
        for (int i = 0; i < ints.length -1; i++) {
            for (int j = 0; j < ints.length - i -1; j++) {
                if(ints[j] > ints[j+1]){
                    temp =  ints[j];
                    ints[j] = ints[j+1];
                    ints[j+1] = temp;
                }
            }
        }
        for (int i = 0; i < ints.length; i++) {
            System.out.println(ints[i]);
        }
    }



2、 选择排序（Selection Sort）   首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推


   public void selectionSort(int[] ints){
       if(ints.length<2){
           return;
       }
       for (int j = 0; j < ints.length - 1; j++) {
           System.out.println(j);
           int min = ints[j];
           int index = j;
           for (int i = j; i < ints.length ; i++) {
               if( ints[i] <min ){
                   min = ints[i];
                   index = i;
               }
           }
           //交换位置
           ints[index] = ints[j];
           ints[j] = min;
       }
       for (int i = 0; i < ints.length; i++) {
           System.out.println(ints[i]);
       }
   }


3、插入排序（Insertion Sort）    打麻将一样 
  基本思想：在要排序的一组数中，假定前n-1个数已经排好序，现在将第n个数插到前面的有序数列中，使得这n个数也是排好顺序的。如此反复循环，


    public void insertionSort(int[] ints){
        if(ints.length<2){
            return;
        }
        int temp;
        for (int i = 0; i < ints.length - 1; i++) {
            for (int j = i+1; j > 0; j--) {
                if(ints[j] < ints[j-1]){
                    temp = ints[j-1];
                    ints[j-1] = ints[j];
                    ints[j] = temp;
                }
            }
        }
        for (int i = 0; i < ints.length; i++) {
            System.out.println(ints[i]);
        }
    }




4、 希尔排序（Shell Sort）

https://v.youku.com/v_show/id_XMzI3Mzg5NDQ1Mg==.html?spm=a2h0k.11417342.soresults.dposter


设定分组间隔，开始设为长度的一半，比如说 4 ， 然后 1 、5 、 9 ··· 这些元素一组 ， 2 、6 、10 ···· 这些元素一组；各组内用插入排序进行排序；

调整分组间隔为原来的一半 2 ，重复之前的步骤 ；

直到分组间隔为 1 ， 此时是整个数组排一遍  



    public void shellSort(int[] ints){
        if(ints.length<2){
            return;
        }
        int k = ints.length/2; //分组间隔
        int temp ;
        while(k > 0){
            for (int i = 0; i < ints.length; i++) {
                for (int j = i; j >0 ; j--) {
                    if(j-k >=0 && ints[j] < ints[j-k]){  // 跟插入排序的一点区别
                        //交换
                        temp = ints[j-k];
                        ints[j-k] = ints[j];
                        ints[j] = temp;
                    }
                }
            }
            k = k/2;
        }
        for (int i = 0; i < ints.length; i++) {
            System.out.println(ints[i]);
        }
    }


5、归并排序（Merge Sort）


该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序


关键 ： 合并两个 有序的子序列时 ， 每次取出的值，肯定是其中一个子序列的第一个值


  递归  
  
      1、  递归拆分  
	  
	  2、  合并同时排序 



    /*
    * 合并两个 有序的子序列时 ， 每次取出的值，肯定是其中一个子序列的第一个值
     */
    public int[] mergeSort(int[] ints){
        if(ints.length<2){
            return ints;
        }
        int k = ints.length/2;

        int[] left = Arrays.copyOfRange(ints,0,k);
        int[] right = Arrays.copyOfRange(ints,k,ints.length);

        int[] ints1 = mergeSort(left);
        int[] ints2 = mergeSort(right); // 递归 数组拆分

        int[] result = merge(ints1,ints2); //合并排序两个数组

        return result;
    }



    private int[] merge(int[] left, int[] right) {
        int[] result = new int[left.length+right.length];
        int leftIndex = 0; // 数组遍历的下标
        int rightIndex = 0;
        for (int i = 0; i < result.length; i++) {
           if(leftIndex == left.length){  //左数组已经遍历完了，把右数组剩余的值放到result去
               System.arraycopy(right,rightIndex,result,i,right.length-rightIndex);
               break;
           }
           if(rightIndex == right.length){
               System.arraycopy(left,leftIndex,result,i,left.length-leftIndex);
               break;
           }
           if(left[leftIndex]>right[rightIndex]){
               result[i] = right[rightIndex];
               rightIndex = rightIndex + 1; //下标
           }else{
               result[i] = left[leftIndex];
               leftIndex = leftIndex + 1;
           }
        }
        return result;
    }



